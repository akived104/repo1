1. A class is a user-defined blueprint or prototype from which objects are created. Classes provide a means of bundling data and functionality together. 
An Object is an instance of a Class. A class is like a blueprint while an instance is a copy of the class with actual values.
eg:
class ClassName:
    rollno =10

obj = ClassName()
print(obj.rollno)  #prints 10

2. The four pillars of OOP are encapsulation, abstraction, inheritance, and polymorphism.
Encapsulation is the process of packaging data and related code into a single object. Abstraction is the process of hiding data and implementation details so that the programmer can focus on the overall logic of the program.Inheritance allows the programmer to create a hierarchy of related classes. Polymorphism is the ability to  have more than 1 form.
3. The __init__ method lets the class initialize the objectâ€™s attributes and serves no other purpose. It is only used within classes. 
class cat:                   
 
def __init__(self,breed,color):
  
    self.breed = breed       
    self.eyeColor = color
    
4.The self is used to represent the instance of the class. With this keyword, you can access the attributes and methods of the class in python. 
5. Inheritance is one of the main features of object-oriented programming, allowing one class to inherit another class's properties.
Single Inheritance enables a derived class to inherit properties from a single parent class, thus enabling code reusability and the addition of new features to existing code.
class Parent:
    def func1(self):
        print("This function is in parent class.")
class Child(Parent):
    def func2(self):
        print("This function is in child class.")

object = Child()
object.func1()
object.func2()

In multiple inheritances, all the features of the base classes are inherited into the derived class. 
class Mother:
    mothername = ""
 
    def mother(self):
        print(self.mothername)

class Father:
    fathername = ""
 
    def father(self):
        print(self.fathername)

class Son(Mother, Father):
    def parents(self):
        print("Father :", self.fathername)
        print("Mother :", self.mothername)

s1 = Son()
s1.fathername = "fat"
s1.mothername = "mom"
s1.parents()
In multilevel inheritance, features of the base class and the derived class are further inherited into the new derived class. This is similar to a relationship representing a child and a grandfather.
class Grandfather:
    def __init__(self, grandfathername):
        self.grandfathername = grandfathername
class Father(Grandfather):
    def __init__(self, fathername, grandfathername):
        self.fathername = fathername
 
        # invoking constructor of Grandfather class
        Grandfather.__init__(self, grandfathername)
class Son(Father):
    def __init__(self, sonname, fathername, grandfathername):
        self.sonname = sonname
        Father.__init__(self, fathername, grandfathername)
 
    def print_name(self):
        print('Grandfather name :', self.grandfathername)
        print("Father name :", self.fathername)
        print("Son name :", self.sonname)

s1 = Son('Prince', 'Rampal', 'Lal mani')
print(s1.grandfathername)
s1.print_name()
When more than one derived class are created from a single base this type of inheritance is called hierarchical inheritance.
class Parent:
    def func1(self):
        print("This function is in parent class.")
class Child1(Parent):
    def func2(self):
        print("This function is in child 1.")
class Child2(Parent):
    def func3(self):
        print("This function is in child 2.")

object1 = Child1()
object2 = Child2()
object1.func1()
object1.func2()
object2.func1()
object2.func3()
Inheritance consisting of multiple types of inheritance is called hybrid inheritance.

class School:
    def func1(self):
        print("This function is in school.")
 
 
class Student1(School):
    def func2(self):
        print("This function is in student 1. ")
 
 
class Student2(School):
    def func3(self):
        print("This function is in student 2.")
 
 
class Student3(Student1, School):
    def func4(self):
        print("This function is in student 3.")
object = Student3()
object.func1()
object.func2()
